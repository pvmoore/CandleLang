{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "candle",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#chars"
		},
		{
			"include": "#function-calls"
		},
		{
			"include": "#line-comment"
		},
		{
			"include": "#block-comment"
		},
		{
			"include": "#named_arguments"
		},
		{
			"include": "#number-literals"
		},
		{
			"include": "#user-defined-type"
		},
		{
			"include": "#terminator"
		},
		{
			"include": "#curly-brackets"
		},
		{
			"include": "#pipes"
		}
	],
	"repository": {
		"block-comment": {
			"patterns": [
				{
					"begin": "/\\*",
					"end": "\\*/",
					"name": "comment.block.candle"
				}
			]
		},
		"chars": {
			"begin": "'",
			"end": "'",
			"name": "constant.numeric.char.candle",
			"patterns": [
				{
					"match": "\\\\.",
					"name": "constant.numeric.char.escape.candle"
				}
			]
		},
		"curly-brackets": {
			"patterns": [
				{
					"match": "(\\{|\\})",
					"name": "punctuation.curly-brackets"
				}
			]
		},
		"function-calls": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "entity.name.function"
						}
					},
					"match": "\\b([_a-z][_a-zA-Z0-9]*)\\("
				},
				{
					"captures": {
						"1": {
							"name": "entity.name.function"
						}
					},
					"match": "\\b(operator(\\[\\]|==|!=))\\("
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"match": "\\b(const|if|while|return|import|assert|not|is|as|and|or|else|break|continue|choose)\\b",
					"name": "keyword.control.candle"
				},
				{
					"match": "\\b(alias|bool|byte|ubyte|short|ushort|int|uint|long|ulong|float|double|void|struct|func|enum)(\\*+|\\b)",
					"name": "storage.type.candle"
				},
				{
					"match": "\\b(pub|extern)(\\*+|\\b)",
					"name": "storage.modifier.candle"
				},
				{
					"match": "@[_\\w]+\\b",
					"name": "entity.name.function.candle"
				},
				{
					"match": "\\[\\[.*\\]\\]",
					"name": "entity.name.tag.candle"
				},
				{
					"match": "\\b\\[.*\\]\\b",
					"name": "entity.name.tag.candle"
				},
				{
					"match": "\\b(true|false|null)\\b",
					"name": "constant.numeric"
				},
				{
					"match": "\\b(thisnope)(\\**|\\b)",
					"name": "entity.other.this.candle"
				}
			]
		},
		"line-comment": {
			"patterns": [
				{
					"match": "//.*$",
					"name": "comment.line.candle"
				}
			]
		},
		"named_arguments": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "entity.name.tag.candle"
						}
					},
					"match": "[^\\.]([a-zA-Z_][a-zA-Z0-9_]*\\s*):(?!=)"
				}
			]
		},
		"number-literals": {
			"patterns": [
				{
					"match": "([\\d_]+\\.[\\d_]+(f|d|h)?)",
					"name": "constant.numeric.float"
				},
				{
					"match": "\\b[\\d_]+\\b",
					"name": "constant.numeric"
				},
				{
					"match": "\\b0b[0-1_]+\\b",
					"name": "constant.numeric.binary"
				},
				{
					"match": "\\b0x[\\d_a-fA-F]+\\b",
					"name": "constant.numeric.hex"
				}
			]
		},
		"pipes": {
			"patterns": [
				{
					"match": "\\|",
					"name": "punctuation.pipe"
				}
			]
		},
		"strings": {
			"begin": "\"",
			"end": "\"",
			"name": "string.quoted.double.candle",
			"patterns": [
				{
					"match": "\\\\.",
					"name": "constant.character.escape.candle"
				}
			]
		},
		"terminator": {
			"patterns": [
				{
					"match": ";",
					"name": "punctuation.terminator"
				}
			]
		},
		"user-defined-type": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "storage.type.user-defined.candle"
						}
					},
					"match": "\\b([A-Z][_a-zA-Z0-9]+(\\*+|\\b|\\())"
				}
			]
		}
	},
	"scopeName": "source.candle"
}