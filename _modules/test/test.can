


int wibble;

func main(void->int) {
    
    testVisibility();

    int a  = 6;
    int* b = null;


    putchar('a');

    //FILE* ff = fopen(c"name", c"b");


    stdio::putChar('b');

    doSomething(null, null);
    doSomethingElse();

    @assert(true);

    variables();
    binary();
    as_();
    is_();
    id();
    literalstruct();
    struct_();
    func_();
    alias_();
    strings();
    arrays();


    return 0;
}

func testVisibility() {
    // test ===> test2 ===> test3
    //                 ---> test4
    // 
    //      ---> test5 ===> test6
    //                 ---> test7
    
    // ################################################# test2 (unqualified access)
    // public 
    // struct 
    AAA2 aaa2;
    test2::AAA2 aaa2b;

    // func

    // private 
    // struct 
    //ZZZ2 zzz2;                // Type 'ZZZ2' not found
    //test2::ZZZ2 zzz2b;        // Type 'ZZZ2' not found

    // func

    // ################################################# test5 (qualified access)
    // public 
    // struct 
    //AAA5 aaa5;               // Type 'AAA5' not found
    test5::AAA5 aaa5b;
    
    // func

    // private 
    // struct
    // ZZZ5 zzz5;
    // test5::ZZZ5 zzz5b;  

    // func

    // ################################################# test3 - nothing should be visible
    // struct
    //AAA3 aaa3;         // Type 'AAA3' not found
    //ZZZ3 zzz3;         // Type 'ZZZ3' not found
    //test3::AAA3 aaa3; // Syntax error. Expected module reference. Module 'test3' not found
    //test3::ZZZ3 zzz3; // Syntax error. Expected module reference. Module 'test3' not found

    // func

}

// private local function
func doSomethingElse() {

}

// public local function
pub func doSomething(int* a, float** b) {
    bool c = not true;

    int d = 'a';
    long e = 0xff;
    float f = foo;

    int y = 1 + 2 / 3;
    int z = 1 / 2 + 3;
    float g = 1.0;
    float g2 = 1.3f;

    Apple apple;

    std::PlumPublic plum;
    //PlumPublic plum;
    //PlumPrivate plum2;
    //std::PlumPrivate plum2;


}

// all variables are private
float foo = 1;

// public local struct
pub struct Apple {
    int a;
}

// private local struct
struct Peach {
    int a;
}


/*
void foo() {

    int value = 4;
    int* ptr;

    func(int->int) bar = (a) {
        ptr += 1;
        return a + value;
    };
}

// generates
func lambda_1(ubyte* closure, int a -> int) {
    int value = @valueOf((int*)closure);
    int** ptr = (int**)(closure+8);

    (*ptr) += 1;

    return a + value;
}
*/
