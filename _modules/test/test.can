


wibble:int;

func main(void->int) {
    
    testVisibility();

    a:int  = 6;
    b:int* = null;


    putchar('a');

    //ff:FILE* = fopen(c"name", c"b");


    stdio::putChar('b');

    doSomething(null, null);
    doSomethingElse();

    @assert(true);

    variables();
    binary();
    as_();
    is_();
    id();
    literalstruct();
    struct_();
    func_();
    alias_();
    strings();
    arrays();


    return 0;
}

func testVisibility() {
    // test ===> test2 ===> test3
    //                 ---> test4
    // 
    //      ---> test5 ===> test6
    //                 ---> test7
    
    // ################################################# test2 (unqualified access)
    // public 
    // struct 
    aaa2 : AAA2;
    aaa2b: test2::AAA2;

    // private 
    // struct 
    //zzz2: ZZZ2;                // Type 'ZZZ2' not found
    //zzz2b: test2::ZZZ2;        // Type 'ZZZ2' not found


    // ################################################# test5 (qualified access)
    // public 
    // struct 
    //aaa5: AAA5;               // Type 'AAA5' not found
    aaa5b: test5::AAA5;
    
    // private 
    // struct
    // zzz5 : ZZZ5;
    // zzz5b : test5::ZZZ5;  


    // ################################################# test5 - nothing should be visible
    //aaa3: AAA3;
    //zzz3: ZZZ3;
    //aaa3: test3::AAA3; // <---- fixme !!!!!!
    //zzz3: test3::ZZZ3; // <---- fixme !!!!!!

    // test4 - nothing should be visible
    // test6 - nothing should be visible
    // test7 - nothing should be visible
}

// private local function
func doSomethingElse() {

}

// public local function
pub func doSomething(a:int*, b:float**) {
    c:bool = not true;

    d:int = 'a';
    e:long = 0xff;
    f:float = foo;

    y:int = 1 + 2 / 3;
    z:int = 1 / 2 + 3;
    g:float = 1.0;
    g2:float = 1.3f;

    apple:Apple;

    plum:std::PlumPublic;
    //PlumPublic plum;
    //PlumPrivate plum2;
    //std.PlumPrivate plum2;


}

// all variables are private
foo:float = 1;

// public local struct
pub struct Apple {
    a:int;
}

// private local struct
struct Peach {
    a:int;
}


//
////////////////////////////////////////
// Different syntax idea
////////////////////////////////////////
//

/*
Apple struct = {
    a int
}
Apple struct(int) = {
    a int
}

Pear struct(int)

foo (a int -> void) = {

}

bar = (a int -> int) { return 1 }

Blah int

a bool = true
*/

//
////////////////////////////////////////
//



/*
void foo() {

    int value = 4;
    int* ptr;

    int(int) bar = (a) {
        ptr += 1;
        return a + value;
    };
}

// generates
int lambda_1(ubyte* closure, int a) {
    int value = @valueOf((int*)closure);
    int** ptr = (int**)(closure+8);

    (*ptr) += 1;

    return a + value;
}
*/
