
extern func putchar(int->int); 


wibble:int;

func main(void->int) {
    a:int  = 6;
    b:int* = null;


    putchar('a');


    std.putChar('b');

    doSomething(null, null);
    doSomethingElse();

    @assert(true);

    variables();
    binary();
    as_();
    is_();
    id();
    literalstruct();
    struct_();
    func_();
    alias_();

    return 0;
}

// private local function
func doSomethingElse() {

}

// public local function
pub func doSomething(a:int*, b:float**) {
    c:bool = not true;

    d:int = 'a';
    e:long = 0xff;
    f:float = foo;

    y:int = 1 + 2 / 3;
    z:int = 1 / 2 + 3;
    g:float = 1.0;
    g2:float = 1.3f;

    apple:Apple;

    plum:std.PlumPublic;
    //PlumPublic plum;
    //PlumPrivate plum2;
    //std.PlumPrivate plum2;


}

// all variables are private
foo:float = 1;

// public local struct
pub struct Apple {
    a:int;
}

// private local struct
struct Peach {
    a:int;
}


//
////////////////////////////////////////
// Different syntax idea
////////////////////////////////////////
//

/*
Apple struct = {
    a int
}
Apple struct(int) = {
    a int
}

Pear struct(int)

foo (a int -> void) = {

}

bar = (a int -> int) { return 1 }

Blah int

a bool = true
*/

//
////////////////////////////////////////
//



/*
void foo() {

    int value = 4;
    int* ptr;

    int(int) bar = (a) {
        ptr += 1;
        return a + value;
    };
}

// generates
int lambda_1(ubyte* closure, int a) {
    int value = @valueOf((int*)closure);
    int** ptr = (int**)(closure+8);

    (*ptr) += 1;

    return a + value;
}
*/
